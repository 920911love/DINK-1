# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from radar_msgs/RadarTarget.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RadarTarget(genpy.Message):
  _md5sum = "9a3f08fbf8844e0e5e6eabe429590c4f"
  _type = "radar_msgs/RadarTarget"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Radar Object Message
# Contains information on a single radar object

uint16 id                    # Target Id

uint16 status                # Status

float32 range                # Raw longitudinal range (m)
float32 range_rate           # Raw longitudinal range velocity (m/sec)
float32 range_acceleration   # Raw longitudinal range acceleration (m/sec^2)

float32 angle                # Heading angle (rad)

float32 width                # Width (m)

float32 lateral_rate         # Lateral velocity (m/sec)

float32 position_x           # Forward distance in vehicle reference frame (m)
float32 position_y           # Left distance in vehicle reference frame (m)


"""
  __slots__ = ['id','status','range','range_rate','range_acceleration','angle','width','lateral_rate','position_x','position_y']
  _slot_types = ['uint16','uint16','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,status,range,range_rate,range_acceleration,angle,width,lateral_rate,position_x,position_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarTarget, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.status is None:
        self.status = 0
      if self.range is None:
        self.range = 0.
      if self.range_rate is None:
        self.range_rate = 0.
      if self.range_acceleration is None:
        self.range_acceleration = 0.
      if self.angle is None:
        self.angle = 0.
      if self.width is None:
        self.width = 0.
      if self.lateral_rate is None:
        self.lateral_rate = 0.
      if self.position_x is None:
        self.position_x = 0.
      if self.position_y is None:
        self.position_y = 0.
    else:
      self.id = 0
      self.status = 0
      self.range = 0.
      self.range_rate = 0.
      self.range_acceleration = 0.
      self.angle = 0.
      self.width = 0.
      self.lateral_rate = 0.
      self.position_x = 0.
      self.position_y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2H8f().pack(_x.id, _x.status, _x.range, _x.range_rate, _x.range_acceleration, _x.angle, _x.width, _x.lateral_rate, _x.position_x, _x.position_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.id, _x.status, _x.range, _x.range_rate, _x.range_acceleration, _x.angle, _x.width, _x.lateral_rate, _x.position_x, _x.position_y,) = _get_struct_2H8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2H8f().pack(_x.id, _x.status, _x.range, _x.range_rate, _x.range_acceleration, _x.angle, _x.width, _x.lateral_rate, _x.position_x, _x.position_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.id, _x.status, _x.range, _x.range_rate, _x.range_acceleration, _x.angle, _x.width, _x.lateral_rate, _x.position_x, _x.position_y,) = _get_struct_2H8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2H8f = None
def _get_struct_2H8f():
    global _struct_2H8f
    if _struct_2H8f is None:
        _struct_2H8f = struct.Struct("<2H8f")
    return _struct_2H8f
