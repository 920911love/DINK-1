// Generated by gencpp from file radar_msgs/RadarTarget.msg
// DO NOT EDIT!


#ifndef RADAR_MSGS_MESSAGE_RADARTARGET_H
#define RADAR_MSGS_MESSAGE_RADARTARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace radar_msgs
{
template <class ContainerAllocator>
struct RadarTarget_
{
  typedef RadarTarget_<ContainerAllocator> Type;

  RadarTarget_()
    : id(0)
    , status(0)
    , range(0.0)
    , range_rate(0.0)
    , range_acceleration(0.0)
    , angle(0.0)
    , width(0.0)
    , lateral_rate(0.0)
    , position_x(0.0)
    , position_y(0.0)  {
    }
  RadarTarget_(const ContainerAllocator& _alloc)
    : id(0)
    , status(0)
    , range(0.0)
    , range_rate(0.0)
    , range_acceleration(0.0)
    , angle(0.0)
    , width(0.0)
    , lateral_rate(0.0)
    , position_x(0.0)
    , position_y(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _id_type;
  _id_type id;

   typedef uint16_t _status_type;
  _status_type status;

   typedef float _range_type;
  _range_type range;

   typedef float _range_rate_type;
  _range_rate_type range_rate;

   typedef float _range_acceleration_type;
  _range_acceleration_type range_acceleration;

   typedef float _angle_type;
  _angle_type angle;

   typedef float _width_type;
  _width_type width;

   typedef float _lateral_rate_type;
  _lateral_rate_type lateral_rate;

   typedef float _position_x_type;
  _position_x_type position_x;

   typedef float _position_y_type;
  _position_y_type position_y;





  typedef boost::shared_ptr< ::radar_msgs::RadarTarget_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radar_msgs::RadarTarget_<ContainerAllocator> const> ConstPtr;

}; // struct RadarTarget_

typedef ::radar_msgs::RadarTarget_<std::allocator<void> > RadarTarget;

typedef boost::shared_ptr< ::radar_msgs::RadarTarget > RadarTargetPtr;
typedef boost::shared_ptr< ::radar_msgs::RadarTarget const> RadarTargetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radar_msgs::RadarTarget_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radar_msgs::RadarTarget_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace radar_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'radar_msgs': ['/home/dink/DINK/ros/src/msgs/platform_automation_msgs/radar_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::radar_msgs::RadarTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_msgs::RadarTarget_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_msgs::RadarTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_msgs::RadarTarget_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_msgs::RadarTarget_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_msgs::RadarTarget_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radar_msgs::RadarTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9a3f08fbf8844e0e5e6eabe429590c4f";
  }

  static const char* value(const ::radar_msgs::RadarTarget_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9a3f08fbf8844e0eULL;
  static const uint64_t static_value2 = 0x5e6eabe429590c4fULL;
};

template<class ContainerAllocator>
struct DataType< ::radar_msgs::RadarTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radar_msgs/RadarTarget";
  }

  static const char* value(const ::radar_msgs::RadarTarget_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radar_msgs::RadarTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Radar Object Message\n\
# Contains information on a single radar object\n\
\n\
uint16 id                    # Target Id\n\
\n\
uint16 status                # Status\n\
\n\
float32 range                # Raw longitudinal range (m)\n\
float32 range_rate           # Raw longitudinal range velocity (m/sec)\n\
float32 range_acceleration   # Raw longitudinal range acceleration (m/sec^2)\n\
\n\
float32 angle                # Heading angle (rad)\n\
\n\
float32 width                # Width (m)\n\
\n\
float32 lateral_rate         # Lateral velocity (m/sec)\n\
\n\
float32 position_x           # Forward distance in vehicle reference frame (m)\n\
float32 position_y           # Left distance in vehicle reference frame (m)\n\
\n\
\n\
";
  }

  static const char* value(const ::radar_msgs::RadarTarget_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radar_msgs::RadarTarget_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.status);
      stream.next(m.range);
      stream.next(m.range_rate);
      stream.next(m.range_acceleration);
      stream.next(m.angle);
      stream.next(m.width);
      stream.next(m.lateral_rate);
      stream.next(m.position_x);
      stream.next(m.position_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarTarget_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radar_msgs::RadarTarget_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radar_msgs::RadarTarget_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id);
    s << indent << "status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.status);
    s << indent << "range: ";
    Printer<float>::stream(s, indent + "  ", v.range);
    s << indent << "range_rate: ";
    Printer<float>::stream(s, indent + "  ", v.range_rate);
    s << indent << "range_acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.range_acceleration);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "lateral_rate: ";
    Printer<float>::stream(s, indent + "  ", v.lateral_rate);
    s << indent << "position_x: ";
    Printer<float>::stream(s, indent + "  ", v.position_x);
    s << indent << "position_y: ";
    Printer<float>::stream(s, indent + "  ", v.position_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADAR_MSGS_MESSAGE_RADARTARGET_H
