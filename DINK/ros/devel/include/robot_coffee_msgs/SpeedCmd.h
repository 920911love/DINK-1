// Generated by gencpp from file robot_coffee_msgs/SpeedCmd.msg
// DO NOT EDIT!


#ifndef ROBOT_COFFEE_MSGS_MESSAGE_SPEEDCMD_H
#define ROBOT_COFFEE_MSGS_MESSAGE_SPEEDCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_coffee_msgs
{
template <class ContainerAllocator>
struct SpeedCmd_
{
  typedef SpeedCmd_<ContainerAllocator> Type;

  SpeedCmd_()
    : speed_cmd(0.0)
    , speed_cmd_type(0)
    , enable(false)
    , clear(false)
    , ignore(false)
    , count(0)  {
    }
  SpeedCmd_(const ContainerAllocator& _alloc)
    : speed_cmd(0.0)
    , speed_cmd_type(0)
    , enable(false)
    , clear(false)
    , ignore(false)
    , count(0)  {
  (void)_alloc;
    }



   typedef float _speed_cmd_type;
  _speed_cmd_type speed_cmd;

   typedef uint8_t _speed_cmd_type_type;
  _speed_cmd_type_type speed_cmd_type;

   typedef uint8_t _enable_type;
  _enable_type enable;

   typedef uint8_t _clear_type;
  _clear_type clear;

   typedef uint8_t _ignore_type;
  _ignore_type ignore;

   typedef uint8_t _count_type;
  _count_type count;



  enum {
    CMD_NONE = 0u,
    CMD_KPH = 1u,
    CMD_PERCENT = 2u,
  };


  typedef boost::shared_ptr< ::robot_coffee_msgs::SpeedCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_coffee_msgs::SpeedCmd_<ContainerAllocator> const> ConstPtr;

}; // struct SpeedCmd_

typedef ::robot_coffee_msgs::SpeedCmd_<std::allocator<void> > SpeedCmd;

typedef boost::shared_ptr< ::robot_coffee_msgs::SpeedCmd > SpeedCmdPtr;
typedef boost::shared_ptr< ::robot_coffee_msgs::SpeedCmd const> SpeedCmdConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_coffee_msgs::SpeedCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_coffee_msgs::SpeedCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_coffee_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'robot_coffee_msgs': ['/home/dink/DINK/ros/src/can/robot_coffee_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_coffee_msgs::SpeedCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_coffee_msgs::SpeedCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_coffee_msgs::SpeedCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_coffee_msgs::SpeedCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_coffee_msgs::SpeedCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_coffee_msgs::SpeedCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_coffee_msgs::SpeedCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "020a56502d27d9233fdee36a15fead3f";
  }

  static const char* value(const ::robot_coffee_msgs::SpeedCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x020a56502d27d923ULL;
  static const uint64_t static_value2 = 0x3fdee36a15fead3fULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_coffee_msgs::SpeedCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_coffee_msgs/SpeedCmd";
  }

  static const char* value(const ::robot_coffee_msgs::SpeedCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_coffee_msgs::SpeedCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Speed cmd\n\
# Options defined below\n\
float32 speed_cmd\n\
uint8 speed_cmd_type\n\
\n\
# Enable\n\
bool enable\n\
\n\
# Clear driver overrides\n\
bool clear\n\
\n\
# Ignore driver overrides\n\
bool ignore\n\
\n\
# Watchdog counter (optional)\n\
uint8 count\n\
\n\
uint8 CMD_NONE=0\n\
uint8 CMD_KPH=1     # KPH, range 0 to 10kph\n\
uint8 CMD_PERCENT=2 # Percent of maximum throttle, range 0 to 1\n\
\n\
";
  }

  static const char* value(const ::robot_coffee_msgs::SpeedCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_coffee_msgs::SpeedCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed_cmd);
      stream.next(m.speed_cmd_type);
      stream.next(m.enable);
      stream.next(m.clear);
      stream.next(m.ignore);
      stream.next(m.count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeedCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_coffee_msgs::SpeedCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_coffee_msgs::SpeedCmd_<ContainerAllocator>& v)
  {
    s << indent << "speed_cmd: ";
    Printer<float>::stream(s, indent + "  ", v.speed_cmd);
    s << indent << "speed_cmd_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed_cmd_type);
    s << indent << "enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable);
    s << indent << "clear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clear);
    s << indent << "ignore: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ignore);
    s << indent << "count: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_COFFEE_MSGS_MESSAGE_SPEEDCMD_H
